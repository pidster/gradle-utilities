/*
 *  Copyright 2012 Pidster
 *
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

gradle.projectsLoaded {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Gradle properties

rootProject.ext.README_MD = """# ProjectName

A project summary goes here

## A_set_of_build_instructions

Put your build instructions here.
"""

rootProject.ext.GRADLE_PROPERTIES_TEXT = """# Gradle Properties
gradleVersion=$gradleVersion
junitVersion=4.10

# Dependency versions
"""


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Gradle properties

rootProject.ext.GRADLE_SETTINGS = """// Gradle Settings

"""


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Single project build file

rootProject.ext.SINGLE_BUILD_GRADLE = """// This is a single project

apply plugin: 'java'

repositories {
    mavenCentral()
}
dependencies {
}
task wrapper(type: Wrapper, description: "Create a Gradle self-download wrapper") {
    group = 'Project Setup'
    gradleVersion = "\$gradleVersion"
}
"""

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Main multi-project build file

rootProject.ext.MULTI_BUILD_GRADLE = """// This is a multi-project

configurations.all {
}

allprojects {
    defaultTasks ['assemble']
}

subprojects {

    // apply plugin: 'eclipse'         // adds support for eclipse project generation
    // apply plugin: 'idea'            // adds support for IDEA project generation
    apply plugin: 'java'            // adds support for java

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    repositories {
        // mavenRepo name: 'Spring Release', url: 'http://repo.springsource.org/release'
        // mavenRepo name: 'Gemstone', url: 'http://dist.gemstone.com/maven/release'
        // mavenRepo name: 'Java.net', url: 'http://download.java.net/maven/2'
        mavenCentral()
    }

    dependencies {
        // testCompile "junit:junit:\$junitVersion"
    }

    jar {
        manifest.attributes provider: 'gradle'
    }
}

// --------------------------------------------------------------------
// global task definitions

task wrapper(type: Wrapper, description: "Create a Gradle self-download wrapper") {
    group = 'Project Setup'
    gradleVersion = "\$gradleVersion"
}

// --------------------------------------------------------------------
// Sub projects

"""

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Sub project build file

rootProject.ext.SUB_BUILD_GRADLE = """// This is a sub-project

project.ext.title = '%SUB_PROJECT_TITLE%'
project.ext.description = 'A description stub for %SUB_PROJECT_TITLE%'
project.ext.packageVersion = '0.1-SNAPSHOT'
project.ext.packageName = 'A_PACKAGE_NAME'

jar {
        archiveName = "\${packageName}-\${packageVersion}.jar"
        manifest {
                attributes (
                        'Implementation-Title': "\$title",
                        'Implementation-Version': "\$packageVersion"
                )
        }
}
"""

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Add tasks to rootProject

    rootProject.tasks.add 'createSingleProject'
    rootProject.'createSingleProject'.group='Project Setup'
    rootProject.'createSingleProject'.description='Creates a single-project structure in the current directory'

    rootProject.tasks.add 'createMultiProject'
    rootProject.'createMultiProject'.group='Project Setup'
    rootProject.'createMultiProject'.description='Creates a multi-project and sub-projects in the current directory'
    rootProject.'createMultiProject'.ext.createNames = null

    rootProject.tasks.add 'addMultiProject'
    rootProject.'addMultiProject'.group='Project Setup'
    rootProject.'addMultiProject'.description='Adds a project to an existing multi-project'
    rootProject.'addMultiProject'.ext.projName = null

    rootProject.createSingleProject << {

        File userDir = new File(System.getProperty('user.dir'))

        Tools.createProjectStructure(userDir)
        Tools.createProjectFiles(userDir, rootProject, rootProject.SINGLE_BUILD_GRADLE)
        Tools.createFile(userDir, 'README.md', rootProject.README_MD)
        Tools.createFile(userDir, 'gradle.properties', project.GRADLE_PROPERTIES_TEXT)
    }

    rootProject.createMultiProject << {
        def userDir = new File(System.getProperty('user.dir'))
        def settings = new File(userDir, 'settings.gradle')
        def build = new File(userDir, 'build.gradle')

        def createNames = System.getProperty('createNames')

        if (settings.exists() || build.exists()) {
            println "There is an existing Gradle project in this directory!\n(Can you use addMultiProject instead?)"
        }
        if (!createNames) {
            println "FAIL, no project names supplied in 'createNames' system property"
            println "Usage: gradle [createMultiProjects | cMP] -DcreateNames=proj1,proj2"
        }
        else {

            def projs = createNames.split ", *"

            projs.each { projName->
                println " Creating sub-project ${rootProject.name}-$projName"
                def projectDir = new File(userDir, "${rootProject.name}-$projName")
                if (!projectDir.exists()) {
                    projectDir.mkdirs()

                    Tools.createProjectStructure(projectDir)
                    def text = rootProject.SUB_BUILD_GRADLE.replaceAll("%SUB_PROJECT_TITLE%", "Project $projName")
                    Tools.createProjectFiles(projectDir, rootProject, text)
                    Tools.writeFile(projectDir, 'gradle.properties', "# Gradle sub-project ($projName) local properties")
                }
            }

            Tools.createFile(userDir, 'build.gradle', rootProject.MULTI_BUILD_GRADLE)
            Tools.createFile(userDir, 'gradle.properties', project.GRADLE_PROPERTIES_TEXT)
            Tools.createFile(userDir, 'README.md', rootProject.README_MD)

            projs.each { projName->
                settings << "include '${rootProject.name}-$projName'\n"
                build << """\nproject(":${rootProject.name}-$projName") {
    dependencies {
        // project dependencies
    }
}
"""
            }
        }
    }

    rootProject.addMultiProject << {
        def userDir = new File(System.getProperty('user.dir'))
        def settings = new File(userDir, 'settings.gradle')
        def build = new File(userDir, 'build.gradle')

        def projName = System.getProperty('projName')

        if (!projName) {
            println "FAIL, no project names supplied in 'projName' system property"
            println "Usage: gradle [addMultiProject | aMP] -DprojName=proj1"
        }
        else if (settings.exists() || build.exists()) {

            println " Creating sub-project ${rootProject.name}-$projName"
            def projectDir = new File(userDir, "${rootProject.name}-$projName")
            if (!projectDir.exists()) {
                projectDir.mkdirs()

                Tools.createProjectStructure(projectDir)
                def text = rootProject.SUB_BUILD_GRADLE.replaceAll("%SUB_PROJECT_TITLE%", "Project $projName")
                Tools.createProjectFiles(projectDir, rootProject, text)
                Tools.writeFile(projectDir, 'gradle.properties', "# Gradle sub-project ($projName) local properties")
            }

            settings << "include '${rootProject.name}-$projName'\n"
            build << """\nproject(":${rootProject.name}-$projName") {
    dependencies {
        // project dependencies
    }
}
"""
        }
        else {
            println "This doesn't seem like a project directory?!"
        }
    }
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Support functions
class Tools {

    static createProjectStructure(File projectDir) {
        def dirs = ['src/main/java', 'src/main/groovy', 'src/main/resources', 'src/test/java', 'src/test/groovy', 'src/test/resources']
        dirs.each { dirName->
            def f = new File(projectDir, dirName)
            if (!f.exists()) f.mkdirs()
        }
    }

    static createProjectFiles(File projectDir, def project, String buildGradle) {
        Tools.createFile(projectDir, 'settings.gradle', project.GRADLE_SETTINGS)
        Tools.createFile(projectDir, 'gradle.properties', '')
        Tools.createFile(projectDir, 'build.gradle', buildGradle)
    }

    static createFile(File dir, String name, String content) {
        def f = new File(dir, name)
        if (f.exists()) {
            println "  EXISTS! $f"
        }
        else {
            println "  creating $f"
            f.write(content, 'UTF-8')
        }
    }

    static writeFile(File dir, String name, String content) {
        def f = new File(dir, name)
        if (f.exists()) {
            f.write(content, 'UTF-8')
            println "  writing $f"
        }
        else {
            println "  MISSING! $f"
        }
    }
}

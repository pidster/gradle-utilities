gradle.projectsLoaded {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Gradle properties

rootProject.ext.README_MD = """# ProjectName

A project summary goes here

## A_set_of_build_instructions

Put your build instructions here.
"""

rootProject.ext.GRADLE_PROPERTIES_TEXT = """# Gradle Properties
gradleVersion=$gradleVersion
junitVersion=4.10

# Dependency versions
"""


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Gradle properties

rootProject.ext.GRADLE_SETTINGS = """// Gradle Settings

"""


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Single project build file

rootProject.ext.SINGLE_BUILD_GRADLE = """// This is a single project

apply plugin: 'java'

repositories {
    mavenCentral()
}
dependencies {
}
task wrapper(type: Wrapper, description: "Create a Gradle self-download wrapper") {
   gradleVersion = "$gradleVersion"
}
"""

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Main multi-project build file

rootProject.ext.MULTI_BUILD_GRADLE = """// This is a multi-project

configurations.all {
}

allprojects {
    defaultTasks ['assemble']
}

subprojects {

    // apply plugin: 'eclipse'         // adds support for eclipse project generation
    // apply plugin: 'idea'            // adds support for IDEA project generation
    // apply plugin: 'java'            // adds support for java

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    repositories {
        // mavenRepo name: 'Spring Release', url: 'http://repo.springsource.org/release'
        // mavenRepo name: 'Gemstone', url: 'http://dist.gemstone.com/maven/release'
        // mavenRepo name: 'Java.net', url: 'http://download.java.net/maven/2'
        mavenCentral()
    }

    dependencies {
        // testCompile "junit:junit:\$junitVersion"
    }

    jar {
        manifest.attributes provider: 'gradle'
    }
}

// --------------------------------------------------------------------
// global task definitions

task wrapper(type: Wrapper, description: "Create a Gradle self-download wrapper") {
    gradleVersion = "\$gradleVersion"
}

// --------------------------------------------------------------------
// Sub projects

"""

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Sub project build file

rootProject.ext.SUB_BUILD_GRADLE = """// This is a sub-project

title = '%SUB_PROJECT_TITLE%'
description = 'A description stub for %SUB_PROJECT_TITLE%'

version = '0.1-SNAPSHOT'
packageName = 'A_PACKAGE_NAME'

sourceCompatibility = 1.6
targetCompatibility = 1.6

jar {
        archiveName = "\${packageName}-\${version}.jar"
        manifest {
                attributes (
                        'Implementation-Title': "\$title",
                        'Implementation-Version': "\$version"
                )
        }
}
"""

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Add tasks to rootProject

    rootProject.tasks.add 'createSingleProject'
	rootProject.createSingleProject << {

		println "executing createSingleProject"
        File userDir = new File(System.getProperty('user.dir'))

        Tools.createProjectStructure(userDir)
        Tools.createProjectFiles(userDir, rootProject, rootProject.SINGLE_BUILD_GRADLE)
        Tools.createFile(userDir, 'README.md', rootProject.README_MD)
    }

    rootProject.tasks.add 'createMultiProject'
    rootProject.'createMultiProject'.ext.createNames = null
    rootProject.'createMultiProject' << {

		println "executing createMultiProject"

        if (createNames == null) {
            println "FAIL, no project names supplied in -PcreateNames=xxx,yyy,zzz property"
        }
        else {

            def userDir = new File(System.getProperty('user.dir'))
            def projs = createNames.split ", *"

            projs.each { projName->
                println " Creating sub-project $projName"
                def projectDir = new File(userDir, projName)
                if (!projectDir.exists()) {
                    projectDir.mkdirs()
                    println " creating $projectDir"
                    Tools.createProjectStructure(projectDir)
                    def text = rootProject.SUB_BUILD_GRADLE.replaceAll("%SUB_PROJECT_TITLE%", "Project $projName")
                    Tools.createProjectFiles(projectDir, rootProject, text)
                }
            }

            Tools.createFile(userDir, 'build.gradle', rootProject.MULTI_BUILD_GRADLE)

            def settings = new File(userDir, 'settings.gradle')
            createNames.each { projName->
                settings << """project(":$projName") {
    dependencies {
        // project dependencies
    }
}
"""
            }

            Tools.createFile(userDir, 'README.md', rootProject.README_MD)
        }
    }
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Support functions
class Tools {

    def static createProjectStructure(File projectDir) {
		def dirs = ['src/main/java', 'src/main/groovy', 'src/main/resources', 'src/test/java', 'src/main/groovy', 'src/main/resources']
        dirs.each { dirName->
            def f = new File(projectDir, dirName)
            if (!f.exists()) f.mkdirs()
        }
    }

    def static createProjectFiles(File projectDir, def project, String buildGradle) {
        Tools.createFile(projectDir, 'gradle.properties', project.GRADLE_PROPERTIES_TEXT)
        Tools.createFile(projectDir, 'settings.gradle', project.GRADLE_SETTINGS)
        Tools.createFile(projectDir, 'build.gradle', buildGradle)
    }

    def static createFile(File dir, String name, String content) {
        def f = new File(dir, name)
        if (f.exists()) {
            println " $f ALREADY EXISTS!"
        }
        else {
            println " Creating: $f"
            f.write(content)
        }
    }
}

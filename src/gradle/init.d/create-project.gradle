gradle.projectsLoaded {

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Gradle properties

rootProject.ext.README_MD = """# ProjectName

A project summary goes here

## A_set_of_build_instructions

Put your build instructions here.
"""

rootProject.ext.GRADLE_PROPERTIES_TEXT = """# Gradle Properties
gradleVersion=$gradleVersion
junitVersion=4.10

# Dependency versions
"""


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Gradle properties

rootProject.ext.GRADLE_SETTINGS = """// Gradle Settings
"""


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Single project build file

rootProject.ext.SINGLE_BUILD_GRADLE = """# This is a single project
apply plugin: 'java'

repositories {
	mavenCentral()
}
dependencies {
}
task wrapper(type: Wrapper, description: "Create a Gradle self-download wrapper") {
   gradleVersion = "$gradleVersion"
}
"""

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Main multi-project build file

rootProject.ext.MULTI_BUILD_GRADLE = """# This is a multi-project

configurations.all {
}

allprojects {
    defaultTasks ['assemble']
}

subprojects {

    // apply plugin: 'eclipse'         // adds support for eclipse project generation
    // apply plugin: 'idea'            // adds support for IDEA project generation
    // apply plugin: 'java'            // adds support for java

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    repositories {
        // mavenRepo name: 'Spring Release', url: 'http://repo.springsource.org/release'
		// mavenRepo name: 'Gemstone', url: 'http://dist.gemstone.com/maven/release'
		// mavenRepo name: 'Java.net', url: 'http://download.java.net/maven/2'
        mavenCentral()
    }

    dependencies {
        // testCompile "junit:junit:\$junitVersion"
    }

    jar {
        manifest.attributes provider: 'gradle'
    }
}

// --------------------------------------------------------------------
// global task definitions

task wrapper(type: Wrapper, description: "Create a Gradle self-download wrapper") {
	gradleVersion = "\$gradleVersion"
}

// --------------------------------------------------------------------
// Sub projects

"""

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Sub project build file

rootProject.ext.SUB_BUILD_GRADLE = """# This is a sub-project
title = '%SUB_PROJECT_TITLE%'
description = 'A description stub for %SUB_PROJECT_TITLE%'

version = '0.1-SNAPSHOT'
packageName = 'A_PACKAGE_NAME'

sourceCompatibility = 1.6
targetCompatibility = 1.6

jar {
		archiveName = "\${packageName}-\${version}.jar"
		manifest {
				attributes (
						'Implementation-Title': "\$title",
						'Implementation-Version': "\$version"
				)
		}
}
"""

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Add tasks to rootProject

    rootProject.tasks.add 'create-project', {
		def userDir = new File(System.getProperty('user.dir'))
		createProjectStructure(userDir)
		createProjectFiles(userDir, rootProject.SINGLE_BUILD_GRADLE)
		createFile(userDir, 'README.md', rootProject.README_MD)
	}

	rootProject.tasks.add 'create-multi-project', {}
    rootProject.'create-multi-project'.ext.projectNames = null
    rootProject.'create-multi-project' << {

		if (projectNames == null) {
			println "FAIL, no project names supplied in -PprojectNames=xxx,yyy,zzz property"
			return
		}

		def userDir = new File(System.getProperty('user.dir'))
		def projs = projectNames.split ", *"
		projs.each { projectName->
            println " Creating: $projectName"
			def projectDir = new File(userDir, projectName)
			if (!projectDir.exists()) {
				projectDir.mkdirs()
				createProjectStructure(projectDir)
                def text = rootProject.SUB_BUILD_GRADLE.replaceAll("%SUB_PROJECT_TITLE%", "Project $projectName")
                createProjectFiles(userDir, text)
			}
		}

		createFile(userDir, 'build.gradle', rootProject.MULTI_BUILD_GRADLE)

        def settings = new File(userDir, 'settings.gradle')
        projectNames.each { projectName->
            settings << """project(":projectName") {
    dependencies {
        // project dependencies
    }
}
            """
        }

		createFile(userDir, 'README.md', rootProject.README_MD)
	}
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Support functions

def createProjectStructure(File projectDir) {
	['src/main/java', 'src/main/groovy', 'src/main/resources', 'src/test/java', 'src/main/groovy', 'src/main/resources']
      .each { dirName->
		def f = new File(projectDir, dirName)
		if (!f.exists()) f.mkdirs()
	}
}

def createProjectFiles(File projectDir, String buildGradle) {
	createFile(projectDir, 'gradle.properties', rootProject.GRADLE_PROPERTIES_TEXT)
	createFile(projectDir, 'settings.gradle', rootProject.GRADLE_SETTINGS)
	createFile(projectDir, 'build.gradle', buildGradle)
}

def createFile(File dir, String name, String content) {
	def f = new File(dir, name)
	if (f.exists()) {
		println " $f ALREADY EXISTS!"
	}
	else {
		println " Creating: $f"
		f.write(content)
	}
}

